#+TITLE: Schemer Notes


* Laws

#+begin_center
*The Law of Car*
The primitive ~car~ is defined only for non-empty lists
#+end_center

#+begin_center
*The Law of Cdr*
The primitive ~cdr~ is defined only for non-empty lists. The ~cdr~ of any non-empty list is always another list.
#+end_center

#+begin_center
*The Law of Cons*
The primitive ~cons~ takes two arguments. The second argument to ~cons~ must be a list. The result is a list.
#+end_center

#+begin_center
*The Law of Null?*
The primitive ~null?~ is defined only for lists.
#+end_center

#+begin_center
*The Law of Eq?*
The primitive ~eq?~ takes two arguments. Each must be a non-numeric atom.
#+end_center

* Chapter 2


#+begin_src scheme
(define lat?
  (lambda (l)
    (cond
     ((null? l) #t)
     ((atom? (car l)) (lat? (cdr l)))
     (else #f))))

(lat? (bacon (and eggs)))
#+end_src

#+RESULTS:

Describe the function ~lat?~ : ~lat?~ looks at each S-expression in a list, in turn, and asks if each S-expression is an atom, until it runs out of S-expressions. If it runs out without encountering a list, the value is ~#t~. I fit finds a list, the value is ~#f~- false

~(atom? (car l) (lat? (cdr l)))~ where /l/ is ~(bacon (and eggs))~

car /l/ is an atom, so we check the if rest of the list /l/ is composed of atoms

Describe how we determined the value ~#f~ for ~(lat l)~ where /l/ is ~(bacon (and eggs))~

~lat l~ looks at each item in its argument to see if it is an atom. If it runs out of items before it finds a list, the value of ~(lat l)~ is ~#t~. If it finds a list, as it did in with (bacon (and eggs)), the vaue of ~(lat? l)~ is ~#f~.
